events {
  # We won't write anything here, but it needs to be here
  # for the file to parse
}

# Purely for convenience - pipe all errors to stdout
error_log /dev/stdout info;

# Create some servers for HTTP(S) requests
http {
  # More convenience, write access logs to the stdout
  access_log /dev/stdout;

  # Create a server that listens on port 80 and does nothing except
  # redirecting (302) all requests on port 80 to https://our_server/request_uri
  # on port 443 instead.
  server {
    listen 80 default_server;
    server_name ruslan.local www.ruslan.local;
    return 302 https://$server_name$request_uri;
  }

  # Create a server that listens on port 443, verifies security
  # using the SSL certificate and key that we have on the server
  # and returns some text.
  server {
    listen 443 ssl;
    server_name ruslan.local www.ruslan.local;

    ssl_certificate     /etc/letsencrypt/live/ruslan.local/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ruslan.local/privkey.pem;

    location / {
      proxy_pass http://ruslan-app:80/;
    }
  }


  # Create some servers that server our api.example.com subdomain
  server {
    listen 80;
    server_name api.ruslan.local api.ruslan.local;
    return 302 https://$server_name$request_uri;
  }

  server {
    listen 443 ssl;
    server_name api.ruslan.local api.ruslan.local;

    ssl_certificate     /etc/letsencrypt/live/api.ruslan.local/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.ruslan.local/privkey.pem;

    location / {
      return 200 'You are now using the API.';
    }

    location /leaderboards/ {
      proxy_pass http://leaderboard-api:80/;
    }
  }
}
